@page "/TennisMatch"
@using BlazorApp2.Shared
@inject HttpClient Http

<div class="card mt-2">
    <div class="card-header">
        <h1>Tennis game</h1>
    </div>

    <div class="card-body">
        <p>Requirements: Load results of the tennis winner from the backend and display it in table. Also tell us who is the winner.</p>
    </div>
    <div>
        @if (!requestSuccess) { <div class="alert alert-danger" role="alert">@status</div> }
        else if (result == null) { <p><em>Loading...</em></p> }
        else { 
            <p>Result: @result</p>
            <p>The winner is: @result.winner</p>
            <p>There are @result.sets.Count()</p>
            @foreach (var set in result.sets)
            {
                <p>Winner in set @result.sets.IndexOf(set) is @set.winner</P>
            }
            <p>Errors: @result.errors.Count()</p>

            <p><em>Everything is fine</em></p> }
    </div>
</div>


@code {
    private Match result;
    private bool requestSuccess = true;
    private string status;
    protected override async Task OnInitializedAsync()
    {
        // TODO: In this case it makes sense to call API directly during initialization.
        // SO inside this method you should receive the data using API call.
        // You can however do it your way if you prefer to :)
        try {
            result = await Http.GetJsonAsync<Match>("TennisMatch/Get");
        }
        catch(Exception e) {
            requestSuccess = false;
            status = "ERROR: " + e.Message;
        }   
    }
}
